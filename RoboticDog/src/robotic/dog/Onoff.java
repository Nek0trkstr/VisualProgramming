/** Generated by YAKINDU Statechart Tools code generator. */
package robotic.dog;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Onoff implements IStatemachine, ITimed {
	public static class Legs {
		private Onoff parent;
		
		public Legs(Onoff parent) {
			this.parent = parent;
		}
		private boolean stand;
		
		
		protected void raiseStand() {
			synchronized(parent) {
				stand = true;
				standObservable.next(null);
			}
		}
		
		private Observable<Void> standObservable = new Observable<Void>();
		
		public Observable<Void> getStand() {
			return standObservable;
		}
		
		private boolean run;
		
		
		protected void raiseRun() {
			synchronized(parent) {
				run = true;
				runObservable.next(null);
			}
		}
		
		private Observable<Void> runObservable = new Observable<Void>();
		
		public Observable<Void> getRun() {
			return runObservable;
		}
		
		private boolean walk;
		
		
		protected void raiseWalk() {
			synchronized(parent) {
				walk = true;
				walkObservable.next(null);
			}
		}
		
		private Observable<Void> walkObservable = new Observable<Void>();
		
		public Observable<Void> getWalk() {
			return walkObservable;
		}
		
	}
	
	public static class Voice {
		private Onoff parent;
		
		public Voice(Onoff parent) {
			this.parent = parent;
		}
		private boolean silent;
		
		
		protected void raiseSilent() {
			synchronized(parent) {
				silent = true;
				silentObservable.next(null);
			}
		}
		
		private Observable<Void> silentObservable = new Observable<Void>();
		
		public Observable<Void> getSilent() {
			return silentObservable;
		}
		
		private boolean bark;
		
		
		protected void raiseBark() {
			synchronized(parent) {
				bark = true;
				barkObservable.next(null);
			}
		}
		
		private Observable<Void> barkObservable = new Observable<Void>();
		
		public Observable<Void> getBark() {
			return barkObservable;
		}
		
		private boolean howl;
		
		
		protected void raiseHowl() {
			synchronized(parent) {
				howl = true;
				howlObservable.next(null);
			}
		}
		
		private Observable<Void> howlObservable = new Observable<Void>();
		
		public Observable<Void> getHowl() {
			return howlObservable;
		}
		
	}
	
	public static class Tail {
		private Onoff parent;
		
		public Tail(Onoff parent) {
			this.parent = parent;
		}
		private boolean idle;
		
		
		protected void raiseIdle() {
			synchronized(parent) {
				idle = true;
				idleObservable.next(null);
			}
		}
		
		private Observable<Void> idleObservable = new Observable<Void>();
		
		public Observable<Void> getIdle() {
			return idleObservable;
		}
		
		private boolean wagging;
		
		
		protected void raiseWagging() {
			synchronized(parent) {
				wagging = true;
				waggingObservable.next(null);
			}
		}
		
		private Observable<Void> waggingObservable = new Observable<Void>();
		
		public Observable<Void> getWagging() {
			return waggingObservable;
		}
		
	}
	
	public static class Battery {
		private Onoff parent;
		
		public Battery(Onoff parent) {
			this.parent = parent;
		}
		private boolean normal;
		
		
		protected void raiseNormal() {
			synchronized(parent) {
				normal = true;
				normalObservable.next(null);
			}
		}
		
		private Observable<Void> normalObservable = new Observable<Void>();
		
		public Observable<Void> getNormal() {
			return normalObservable;
		}
		
		private boolean low;
		
		
		protected void raiseLow() {
			synchronized(parent) {
				low = true;
				lowObservable.next(null);
			}
		}
		
		private Observable<Void> lowObservable = new Observable<Void>();
		
		public Observable<Void> getLow() {
			return lowObservable;
		}
		
		private boolean drained;
		
		
		protected void raiseDrained() {
			synchronized(parent) {
				drained = true;
				drainedObservable.next(null);
			}
		}
		
		private Observable<Void> drainedObservable = new Observable<Void>();
		
		public Observable<Void> getDrained() {
			return drainedObservable;
		}
		
	}
	
	public static class Emotion {
		private Onoff parent;
		
		public Emotion(Onoff parent) {
			this.parent = parent;
		}
		private boolean normal;
		
		
		protected void raiseNormal() {
			synchronized(parent) {
				normal = true;
				normalObservable.next(null);
			}
		}
		
		private Observable<Void> normalObservable = new Observable<Void>();
		
		public Observable<Void> getNormal() {
			return normalObservable;
		}
		
		private boolean love;
		
		
		protected void raiseLove() {
			synchronized(parent) {
				love = true;
				loveObservable.next(null);
			}
		}
		
		private Observable<Void> loveObservable = new Observable<Void>();
		
		public Observable<Void> getLove() {
			return loveObservable;
		}
		
	}
	
	protected Legs legs;
	
	protected Voice voice;
	
	protected Tail tail;
	
	protected Battery battery;
	
	protected Emotion emotion;
	
	public enum State {
		MAIN_REGION_OFF,
		MAIN_REGION_ON,
		MAIN_REGION_ON_LEGS_STAND,
		MAIN_REGION_ON_LEGS_WALK,
		MAIN_REGION_ON_LEGS_RUN,
		MAIN_REGION_ON_VOICE_SILENT,
		MAIN_REGION_ON_VOICE_BARK,
		MAIN_REGION_ON_VOICE_HOWL,
		MAIN_REGION_ON_TAIL_IDLE,
		MAIN_REGION_ON_TAIL_WAGGING,
		MAIN_REGION_ON_EMOTION_NORMAL,
		MAIN_REGION_ON_EMOTION_LOVE,
		MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT,
		MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL,
		MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD,
		MAIN_REGION_ON_BATTERY_DEFAULT,
		MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL,
		MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW,
		MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED,
		MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME,
		MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE,
		MAIN_REGION_ON_HEALTH_GOOD,
		MAIN_REGION_ON_HEALTH_DEGRADED,
		MAIN_REGION_ON_HEALTH_BAD,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[8];
			
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private BlockingQueue<Runnable> internalEventQueue = new LinkedBlockingQueue<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean attentionNeeded;
	private long maxEnergy;
	
	protected long getMaxEnergy() {
		synchronized(Onoff.this) {
			return maxEnergy;
		}
	}
	
	protected void setMaxEnergy(long value) {
		synchronized(Onoff.this) {
			this.maxEnergy = value;
		}
	}
	
	
	private long currentEnergy;
	
	protected long getCurrentEnergy() {
		synchronized(Onoff.this) {
			return currentEnergy;
		}
	}
	
	protected void setCurrentEnergy(long value) {
		synchronized(Onoff.this) {
			this.currentEnergy = value;
		}
	}
	
	
	private long lowEnergy;
	
	protected long getLowEnergy() {
		synchronized(Onoff.this) {
			return lowEnergy;
		}
	}
	
	protected void setLowEnergy(long value) {
		synchronized(Onoff.this) {
			this.lowEnergy = value;
		}
	}
	
	
	private long energyReqBaseline;
	
	protected long getEnergyReqBaseline() {
		synchronized(Onoff.this) {
			return energyReqBaseline;
		}
	}
	
	protected void setEnergyReqBaseline(long value) {
		synchronized(Onoff.this) {
			this.energyReqBaseline = value;
		}
	}
	
	
	private long energyReq;
	
	protected long getEnergyReq() {
		synchronized(Onoff.this) {
			return energyReq;
		}
	}
	
	protected void setEnergyReq(long value) {
		synchronized(Onoff.this) {
			this.energyReq = value;
		}
	}
	
	
	private long hotTempThreshold;
	
	protected long getHotTempThreshold() {
		synchronized(Onoff.this) {
			return hotTempThreshold;
		}
	}
	
	protected void setHotTempThreshold(long value) {
		synchronized(Onoff.this) {
			this.hotTempThreshold = value;
		}
	}
	
	
	private long coldTempThreshold;
	
	protected long getColdTempThreshold() {
		synchronized(Onoff.this) {
			return coldTempThreshold;
		}
	}
	
	protected void setColdTempThreshold(long value) {
		synchronized(Onoff.this) {
			this.coldTempThreshold = value;
		}
	}
	
	
	private long healthPoints;
	
	protected long getHealthPoints() {
		synchronized(Onoff.this) {
			return healthPoints;
		}
	}
	
	protected void setHealthPoints(long value) {
		synchronized(Onoff.this) {
			this.healthPoints = value;
		}
	}
	
	
	private long temperaturePenalty;
	
	protected long getTemperaturePenalty() {
		synchronized(Onoff.this) {
			return temperaturePenalty;
		}
	}
	
	protected void setTemperaturePenalty(long value) {
		synchronized(Onoff.this) {
			this.temperaturePenalty = value;
		}
	}
	
	
	private long batteryPenalty;
	
	protected long getBatteryPenalty() {
		synchronized(Onoff.this) {
			return batteryPenalty;
		}
	}
	
	protected void setBatteryPenalty(long value) {
		synchronized(Onoff.this) {
			this.batteryPenalty = value;
		}
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(Onoff.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(Onoff.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(Onoff.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(Onoff.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public Onoff() {
		legs = new Legs(this);
		voice = new Voice(this);
		tail = new Tail(this);
		battery = new Battery(this);
		emotion = new Emotion(this);
		for (int i = 0; i < 8; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		setCurrentTemp(28);
		
		setMaxEnergy(1000);
		
		setCurrentEnergy(maxEnergy);
		
		setLowEnergy(((maxEnergy / 100) * 25));
		
		setEnergyReqBaseline(10);
		
		setEnergyReq(energyReqBaseline);
		
		setHotTempThreshold(38);
		
		setColdTempThreshold(10);
		
		setHealthPoints(3);
		
		setTemperaturePenalty(0);
		
		setBatteryPenalty(0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$||stateVector[5] != State.$NULLSTATE$||stateVector[6] != State.$NULLSTATE$||stateVector[7] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		turnOff = false;
		turnOn = false;
		barkCommand = false;
		fetchCommand = false;
		comeCommand = false;
		chargerConnected = false;
		chargerDisconnected = false;
		pet = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void clearInternalEvents() {
		attentionNeeded = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			transitioned = main_region_Off_react(transitioned);
			break;
		case MAIN_REGION_ON_LEGS_STAND:
			transitioned = main_region_On_Legs_Stand_react(transitioned);
			break;
		case MAIN_REGION_ON_LEGS_WALK:
			transitioned = main_region_On_Legs_Walk_react(transitioned);
			break;
		case MAIN_REGION_ON_LEGS_RUN:
			transitioned = main_region_On_Legs_Run_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case MAIN_REGION_ON_VOICE_SILENT:
				transitioned = main_region_On_Voice_Silent_react(transitioned);
				break;
			case MAIN_REGION_ON_VOICE_BARK:
				transitioned = main_region_On_Voice_Bark_react(transitioned);
				break;
			case MAIN_REGION_ON_VOICE_HOWL:
				transitioned = main_region_On_Voice_Howl_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2) {
			switch (stateVector[2]) {
			case MAIN_REGION_ON_TAIL_IDLE:
				transitioned = main_region_On_Tail_Idle_react(transitioned);
				break;
			case MAIN_REGION_ON_TAIL_WAGGING:
				transitioned = main_region_On_Tail_Wagging_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3) {
			switch (stateVector[3]) {
			case MAIN_REGION_ON_EMOTION_NORMAL:
				transitioned = main_region_On_Emotion_Normal_react(transitioned);
				break;
			case MAIN_REGION_ON_EMOTION_LOVE:
				transitioned = main_region_On_Emotion_Love_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4) {
			switch (stateVector[4]) {
			case MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT:
				transitioned = main_region_On_Temperature_Sensor_Hot_react(transitioned);
				break;
			case MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL:
				transitioned = main_region_On_Temperature_Sensor_Optimal_react(transitioned);
				break;
			case MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD:
				transitioned = main_region_On_Temperature_Sensor_Cold_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<5) {
			switch (stateVector[5]) {
			case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL:
				transitioned = main_region_On_Battery_default_Status_Normal_react(transitioned);
				break;
			case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW:
				transitioned = main_region_On_Battery_default_Status_Low_react(transitioned);
				break;
			case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED:
				transitioned = main_region_On_Battery_default_Status_Drained_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<6) {
			switch (stateVector[6]) {
			case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME:
				transitioned = main_region_On_Battery_default_Energy_Consume_react(transitioned);
				break;
			case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE:
				transitioned = main_region_On_Battery_default_Energy_Charge_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<7) {
			switch (stateVector[7]) {
			case MAIN_REGION_ON_HEALTH_GOOD:
				transitioned = main_region_On_Health_Good_react(transitioned);
				break;
			case MAIN_REGION_ON_HEALTH_DEGRADED:
				transitioned = main_region_On_Health_Degraded_react(transitioned);
				break;
			case MAIN_REGION_ON_HEALTH_BAD:
				transitioned = main_region_On_Health_Bad_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while (((((((((((((((((turnOff || turnOn) || barkCommand) || fetchCommand) || comeCommand) || chargerConnected) || chargerDisconnected) || pet) || attentionNeeded) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_OFF:
			return stateVector[0] == State.MAIN_REGION_OFF;
		case MAIN_REGION_ON:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ON.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ON_HEALTH_BAD.ordinal();
		case MAIN_REGION_ON_LEGS_STAND:
			return stateVector[0] == State.MAIN_REGION_ON_LEGS_STAND;
		case MAIN_REGION_ON_LEGS_WALK:
			return stateVector[0] == State.MAIN_REGION_ON_LEGS_WALK;
		case MAIN_REGION_ON_LEGS_RUN:
			return stateVector[0] == State.MAIN_REGION_ON_LEGS_RUN;
		case MAIN_REGION_ON_VOICE_SILENT:
			return stateVector[1] == State.MAIN_REGION_ON_VOICE_SILENT;
		case MAIN_REGION_ON_VOICE_BARK:
			return stateVector[1] == State.MAIN_REGION_ON_VOICE_BARK;
		case MAIN_REGION_ON_VOICE_HOWL:
			return stateVector[1] == State.MAIN_REGION_ON_VOICE_HOWL;
		case MAIN_REGION_ON_TAIL_IDLE:
			return stateVector[2] == State.MAIN_REGION_ON_TAIL_IDLE;
		case MAIN_REGION_ON_TAIL_WAGGING:
			return stateVector[2] == State.MAIN_REGION_ON_TAIL_WAGGING;
		case MAIN_REGION_ON_EMOTION_NORMAL:
			return stateVector[3] == State.MAIN_REGION_ON_EMOTION_NORMAL;
		case MAIN_REGION_ON_EMOTION_LOVE:
			return stateVector[3] == State.MAIN_REGION_ON_EMOTION_LOVE;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT:
			return stateVector[4] == State.MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL:
			return stateVector[4] == State.MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD:
			return stateVector[4] == State.MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD;
		case MAIN_REGION_ON_BATTERY_DEFAULT:
			return stateVector[5].ordinal() >= State.
					MAIN_REGION_ON_BATTERY_DEFAULT.ordinal()&& stateVector[5].ordinal() <= State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE.ordinal();
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL:
			return stateVector[5] == State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL;
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW:
			return stateVector[5] == State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW;
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED:
			return stateVector[5] == State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED;
		case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME:
			return stateVector[6] == State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME;
		case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE:
			return stateVector[6] == State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE;
		case MAIN_REGION_ON_HEALTH_GOOD:
			return stateVector[7] == State.MAIN_REGION_ON_HEALTH_GOOD;
		case MAIN_REGION_ON_HEALTH_DEGRADED:
			return stateVector[7] == State.MAIN_REGION_ON_HEALTH_DEGRADED;
		case MAIN_REGION_ON_HEALTH_BAD:
			return stateVector[7] == State.MAIN_REGION_ON_HEALTH_BAD;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public Legs legs() {
		return legs;
	}
	
	public Voice voice() {
		return voice;
	}
	
	public Tail tail() {
		return tail;
	}
	
	public Battery battery() {
		return battery;
	}
	
	public Emotion emotion() {
		return emotion;
	}
	
	protected void raiseAttentionNeeded() {
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				attentionNeeded = true;
			}
		});
	}
	
	private boolean turnOff;
	
	
	public void raiseTurnOff() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					turnOff = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean turnOn;
	
	
	public void raiseTurnOn() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					turnOn = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean barkCommand;
	
	
	public void raiseBarkCommand() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					barkCommand = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean fetchCommand;
	
	
	public void raiseFetchCommand() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					fetchCommand = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean comeCommand;
	
	
	public void raiseComeCommand() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					comeCommand = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean chargerConnected;
	
	
	public void raiseChargerConnected() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					chargerConnected = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean chargerDisconnected;
	
	
	public void raiseChargerDisconnected() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					chargerDisconnected = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean pet;
	
	
	public void raisePet() {
		synchronized(Onoff.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					pet = true;
				}
			});
			runCycle();
		}
	}
	
	private long currentTemp;
	
	public synchronized long getCurrentTemp() {
		synchronized(Onoff.this) {
			return currentTemp;
		}
	}
	
	public void setCurrentTemp(long value) {
		synchronized(Onoff.this) {
			this.currentTemp = value;
		}
	}
	
	/* Entry action for state 'Stand'. */
	private void entryAction_main_region_On_Legs_Stand() {
		timerService.setTimer(this, 0, (5 * 1000), false);
		
		setEnergyReq(energyReqBaseline);
		
		legs.raiseStand();
	}
	
	/* Entry action for state 'Walk'. */
	private void entryAction_main_region_On_Legs_Walk() {
		timerService.setTimer(this, 1, (5 * 1000), false);
		
		setEnergyReq((energyReqBaseline * 2));
		
		legs.raiseWalk();
	}
	
	/* Entry action for state 'Run'. */
	private void entryAction_main_region_On_Legs_Run() {
		timerService.setTimer(this, 2, (5 * 1000), false);
		
		setEnergyReq((energyReqBaseline * 3));
		
		legs.raiseRun();
	}
	
	/* Entry action for state 'Silent'. */
	private void entryAction_main_region_On_Voice_Silent() {
		voice.raiseSilent();
	}
	
	/* Entry action for state 'Bark'. */
	private void entryAction_main_region_On_Voice_Bark() {
		timerService.setTimer(this, 3, (5 * 1000), false);
		
		voice.raiseBark();
	}
	
	/* Entry action for state 'Howl'. */
	private void entryAction_main_region_On_Voice_Howl() {
		timerService.setTimer(this, 4, (5 * 1000), false);
		
		voice.raiseHowl();
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_main_region_On_Tail_Idle() {
		tail.raiseIdle();
	}
	
	/* Entry action for state 'Wagging'. */
	private void entryAction_main_region_On_Tail_Wagging() {
		tail.raiseWagging();
	}
	
	/* Entry action for state 'Normal'. */
	private void entryAction_main_region_On_Emotion_Normal() {
		emotion.raiseNormal();
	}
	
	/* Entry action for state 'Love'. */
	private void entryAction_main_region_On_Emotion_Love() {
		timerService.setTimer(this, 5, (5 * 1000), false);
		
		emotion.raiseLove();
	}
	
	/* Entry action for state 'Hot'. */
	private void entryAction_main_region_On_Temperature_Sensor_Hot() {
		setTemperaturePenalty(1);
	}
	
	/* Entry action for state 'Optimal'. */
	private void entryAction_main_region_On_Temperature_Sensor_Optimal() {
		setTemperaturePenalty(0);
	}
	
	/* Entry action for state 'Cold'. */
	private void entryAction_main_region_On_Temperature_Sensor_Cold() {
		setTemperaturePenalty(1);
	}
	
	/* Entry action for state 'Normal'. */
	private void entryAction_main_region_On_Battery_default_Status_Normal() {
		battery.raiseNormal();
		
		setBatteryPenalty(0);
	}
	
	/* Entry action for state 'Low'. */
	private void entryAction_main_region_On_Battery_default_Status_Low() {
		setBatteryPenalty(1);
		
		battery.raiseLow();
	}
	
	/* Entry action for state 'Drained'. */
	private void entryAction_main_region_On_Battery_default_Status_Drained() {
		battery.raiseDrained();
		
		raiseTurnOff();
	}
	
	/* Entry action for state 'Consume'. */
	private void entryAction_main_region_On_Battery_default_Energy_Consume() {
		timerService.setTimer(this, 6, (1 * 1000), true);
	}
	
	/* Entry action for state 'Charge'. */
	private void entryAction_main_region_On_Battery_default_Energy_Charge() {
		timerService.setTimer(this, 7, (1 * 1000), true);
	}
	
	/* Exit action for state 'Stand'. */
	private void exitAction_main_region_On_Legs_Stand() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Walk'. */
	private void exitAction_main_region_On_Legs_Walk() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Run'. */
	private void exitAction_main_region_On_Legs_Run() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Bark'. */
	private void exitAction_main_region_On_Voice_Bark() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Howl'. */
	private void exitAction_main_region_On_Voice_Howl() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Love'. */
	private void exitAction_main_region_On_Emotion_Love() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Consume'. */
	private void exitAction_main_region_On_Battery_default_Energy_Consume() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Charge'. */
	private void exitAction_main_region_On_Battery_default_Energy_Charge() {
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_Off_default() {
		stateVector[0] = State.MAIN_REGION_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_On_default() {
		enterSequence_main_region_On_Legs_default();
		enterSequence_main_region_On_Voice_default();
		enterSequence_main_region_On_Tail_default();
		enterSequence_main_region_On_Emotion_default();
		enterSequence_main_region_On_Temperature_Sensor_default();
		enterSequence_main_region_On_Battery_default();
		enterSequence_main_region_On_Health_default();
	}
	
	/* 'default' enter sequence for state Stand */
	private void enterSequence_main_region_On_Legs_Stand_default() {
		entryAction_main_region_On_Legs_Stand();
		stateVector[0] = State.MAIN_REGION_ON_LEGS_STAND;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Walk */
	private void enterSequence_main_region_On_Legs_Walk_default() {
		entryAction_main_region_On_Legs_Walk();
		stateVector[0] = State.MAIN_REGION_ON_LEGS_WALK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Run */
	private void enterSequence_main_region_On_Legs_Run_default() {
		entryAction_main_region_On_Legs_Run();
		stateVector[0] = State.MAIN_REGION_ON_LEGS_RUN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Silent */
	private void enterSequence_main_region_On_Voice_Silent_default() {
		entryAction_main_region_On_Voice_Silent();
		stateVector[1] = State.MAIN_REGION_ON_VOICE_SILENT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Bark */
	private void enterSequence_main_region_On_Voice_Bark_default() {
		entryAction_main_region_On_Voice_Bark();
		stateVector[1] = State.MAIN_REGION_ON_VOICE_BARK;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Howl */
	private void enterSequence_main_region_On_Voice_Howl_default() {
		entryAction_main_region_On_Voice_Howl();
		stateVector[1] = State.MAIN_REGION_ON_VOICE_HOWL;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_On_Tail_Idle_default() {
		entryAction_main_region_On_Tail_Idle();
		stateVector[2] = State.MAIN_REGION_ON_TAIL_IDLE;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state Wagging */
	private void enterSequence_main_region_On_Tail_Wagging_default() {
		entryAction_main_region_On_Tail_Wagging();
		stateVector[2] = State.MAIN_REGION_ON_TAIL_WAGGING;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state Normal */
	private void enterSequence_main_region_On_Emotion_Normal_default() {
		entryAction_main_region_On_Emotion_Normal();
		stateVector[3] = State.MAIN_REGION_ON_EMOTION_NORMAL;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state Love */
	private void enterSequence_main_region_On_Emotion_Love_default() {
		entryAction_main_region_On_Emotion_Love();
		stateVector[3] = State.MAIN_REGION_ON_EMOTION_LOVE;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state Hot */
	private void enterSequence_main_region_On_Temperature_Sensor_Hot_default() {
		entryAction_main_region_On_Temperature_Sensor_Hot();
		stateVector[4] = State.MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state Optimal */
	private void enterSequence_main_region_On_Temperature_Sensor_Optimal_default() {
		entryAction_main_region_On_Temperature_Sensor_Optimal();
		stateVector[4] = State.MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state Cold */
	private void enterSequence_main_region_On_Temperature_Sensor_Cold_default() {
		entryAction_main_region_On_Temperature_Sensor_Cold();
		stateVector[4] = State.MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state default */
	private void enterSequence_main_region_On_Battery_default_default() {
		enterSequence_main_region_On_Battery_default_Status_default();
		enterSequence_main_region_On_Battery_default_Energy_default();
	}
	
	/* 'default' enter sequence for state Normal */
	private void enterSequence_main_region_On_Battery_default_Status_Normal_default() {
		entryAction_main_region_On_Battery_default_Status_Normal();
		stateVector[5] = State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state Low */
	private void enterSequence_main_region_On_Battery_default_Status_Low_default() {
		entryAction_main_region_On_Battery_default_Status_Low();
		stateVector[5] = State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state Drained */
	private void enterSequence_main_region_On_Battery_default_Status_Drained_default() {
		entryAction_main_region_On_Battery_default_Status_Drained();
		stateVector[5] = State.MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state Consume */
	private void enterSequence_main_region_On_Battery_default_Energy_Consume_default() {
		entryAction_main_region_On_Battery_default_Energy_Consume();
		stateVector[6] = State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for state Charge */
	private void enterSequence_main_region_On_Battery_default_Energy_Charge_default() {
		entryAction_main_region_On_Battery_default_Energy_Charge();
		stateVector[6] = State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for state Good */
	private void enterSequence_main_region_On_Health_Good_default() {
		stateVector[7] = State.MAIN_REGION_ON_HEALTH_GOOD;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state Degraded */
	private void enterSequence_main_region_On_Health_Degraded_default() {
		stateVector[7] = State.MAIN_REGION_ON_HEALTH_DEGRADED;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state Bad */
	private void enterSequence_main_region_On_Health_Bad_default() {
		stateVector[7] = State.MAIN_REGION_ON_HEALTH_BAD;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Legs */
	private void enterSequence_main_region_On_Legs_default() {
		react_main_region_On_Legs__entry_Default();
	}
	
	/* 'default' enter sequence for region Voice */
	private void enterSequence_main_region_On_Voice_default() {
		react_main_region_On_Voice__entry_Default();
	}
	
	/* 'default' enter sequence for region Tail */
	private void enterSequence_main_region_On_Tail_default() {
		react_main_region_On_Tail__entry_Default();
	}
	
	/* 'default' enter sequence for region Emotion */
	private void enterSequence_main_region_On_Emotion_default() {
		react_main_region_On_Emotion__entry_Default();
	}
	
	/* 'default' enter sequence for region Temperature Sensor */
	private void enterSequence_main_region_On_Temperature_Sensor_default() {
		react_main_region_On_Temperature_Sensor__entry_Default();
	}
	
	/* 'default' enter sequence for region Battery */
	private void enterSequence_main_region_On_Battery_default() {
		react_main_region_On_Battery__entry_Default();
	}
	
	/* 'default' enter sequence for region Status */
	private void enterSequence_main_region_On_Battery_default_Status_default() {
		react_main_region_On_Battery_default_Status__entry_Default();
	}
	
	/* 'default' enter sequence for region Energy */
	private void enterSequence_main_region_On_Battery_default_Energy_default() {
		react_main_region_On_Battery_default_Energy__entry_Default();
	}
	
	/* 'default' enter sequence for region Health */
	private void enterSequence_main_region_On_Health_default() {
		react_main_region_On_Health__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_Off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_On() {
		exitSequence_main_region_On_Legs();
		exitSequence_main_region_On_Voice();
		exitSequence_main_region_On_Tail();
		exitSequence_main_region_On_Emotion();
		exitSequence_main_region_On_Temperature_Sensor();
		exitSequence_main_region_On_Battery();
		exitSequence_main_region_On_Health();
	}
	
	/* Default exit sequence for state Stand */
	private void exitSequence_main_region_On_Legs_Stand() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_On_Legs_Stand();
	}
	
	/* Default exit sequence for state Walk */
	private void exitSequence_main_region_On_Legs_Walk() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_On_Legs_Walk();
	}
	
	/* Default exit sequence for state Run */
	private void exitSequence_main_region_On_Legs_Run() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_On_Legs_Run();
	}
	
	/* Default exit sequence for state Silent */
	private void exitSequence_main_region_On_Voice_Silent() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Bark */
	private void exitSequence_main_region_On_Voice_Bark() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_On_Voice_Bark();
	}
	
	/* Default exit sequence for state Howl */
	private void exitSequence_main_region_On_Voice_Howl() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_On_Voice_Howl();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_On_Tail_Idle() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Wagging */
	private void exitSequence_main_region_On_Tail_Wagging() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state Normal */
	private void exitSequence_main_region_On_Emotion_Normal() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state Love */
	private void exitSequence_main_region_On_Emotion_Love() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_region_On_Emotion_Love();
	}
	
	/* Default exit sequence for state Hot */
	private void exitSequence_main_region_On_Temperature_Sensor_Hot() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state Optimal */
	private void exitSequence_main_region_On_Temperature_Sensor_Optimal() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state Cold */
	private void exitSequence_main_region_On_Temperature_Sensor_Cold() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state Normal */
	private void exitSequence_main_region_On_Battery_default_Status_Normal() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state Low */
	private void exitSequence_main_region_On_Battery_default_Status_Low() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state Drained */
	private void exitSequence_main_region_On_Battery_default_Status_Drained() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state Consume */
	private void exitSequence_main_region_On_Battery_default_Energy_Consume() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
		
		exitAction_main_region_On_Battery_default_Energy_Consume();
	}
	
	/* Default exit sequence for state Charge */
	private void exitSequence_main_region_On_Battery_default_Energy_Charge() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
		
		exitAction_main_region_On_Battery_default_Energy_Charge();
	}
	
	/* Default exit sequence for state Good */
	private void exitSequence_main_region_On_Health_Good() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state Degraded */
	private void exitSequence_main_region_On_Health_Degraded() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state Bad */
	private void exitSequence_main_region_On_Health_Bad() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			exitSequence_main_region_Off();
			break;
		case MAIN_REGION_ON_LEGS_STAND:
			exitSequence_main_region_On_Legs_Stand();
			break;
		case MAIN_REGION_ON_LEGS_WALK:
			exitSequence_main_region_On_Legs_Walk();
			break;
		case MAIN_REGION_ON_LEGS_RUN:
			exitSequence_main_region_On_Legs_Run();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_ON_VOICE_SILENT:
			exitSequence_main_region_On_Voice_Silent();
			break;
		case MAIN_REGION_ON_VOICE_BARK:
			exitSequence_main_region_On_Voice_Bark();
			break;
		case MAIN_REGION_ON_VOICE_HOWL:
			exitSequence_main_region_On_Voice_Howl();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION_ON_TAIL_IDLE:
			exitSequence_main_region_On_Tail_Idle();
			break;
		case MAIN_REGION_ON_TAIL_WAGGING:
			exitSequence_main_region_On_Tail_Wagging();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_REGION_ON_EMOTION_NORMAL:
			exitSequence_main_region_On_Emotion_Normal();
			break;
		case MAIN_REGION_ON_EMOTION_LOVE:
			exitSequence_main_region_On_Emotion_Love();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT:
			exitSequence_main_region_On_Temperature_Sensor_Hot();
			break;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL:
			exitSequence_main_region_On_Temperature_Sensor_Optimal();
			break;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD:
			exitSequence_main_region_On_Temperature_Sensor_Cold();
			break;
		default:
			break;
		}
		
		switch (stateVector[5]) {
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL:
			exitSequence_main_region_On_Battery_default_Status_Normal();
			break;
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW:
			exitSequence_main_region_On_Battery_default_Status_Low();
			break;
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED:
			exitSequence_main_region_On_Battery_default_Status_Drained();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME:
			exitSequence_main_region_On_Battery_default_Energy_Consume();
			break;
		case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE:
			exitSequence_main_region_On_Battery_default_Energy_Charge();
			break;
		default:
			break;
		}
		
		switch (stateVector[7]) {
		case MAIN_REGION_ON_HEALTH_GOOD:
			exitSequence_main_region_On_Health_Good();
			break;
		case MAIN_REGION_ON_HEALTH_DEGRADED:
			exitSequence_main_region_On_Health_Degraded();
			break;
		case MAIN_REGION_ON_HEALTH_BAD:
			exitSequence_main_region_On_Health_Bad();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Legs */
	private void exitSequence_main_region_On_Legs() {
		switch (stateVector[0]) {
		case MAIN_REGION_ON_LEGS_STAND:
			exitSequence_main_region_On_Legs_Stand();
			break;
		case MAIN_REGION_ON_LEGS_WALK:
			exitSequence_main_region_On_Legs_Walk();
			break;
		case MAIN_REGION_ON_LEGS_RUN:
			exitSequence_main_region_On_Legs_Run();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Voice */
	private void exitSequence_main_region_On_Voice() {
		switch (stateVector[1]) {
		case MAIN_REGION_ON_VOICE_SILENT:
			exitSequence_main_region_On_Voice_Silent();
			break;
		case MAIN_REGION_ON_VOICE_BARK:
			exitSequence_main_region_On_Voice_Bark();
			break;
		case MAIN_REGION_ON_VOICE_HOWL:
			exitSequence_main_region_On_Voice_Howl();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Tail */
	private void exitSequence_main_region_On_Tail() {
		switch (stateVector[2]) {
		case MAIN_REGION_ON_TAIL_IDLE:
			exitSequence_main_region_On_Tail_Idle();
			break;
		case MAIN_REGION_ON_TAIL_WAGGING:
			exitSequence_main_region_On_Tail_Wagging();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Emotion */
	private void exitSequence_main_region_On_Emotion() {
		switch (stateVector[3]) {
		case MAIN_REGION_ON_EMOTION_NORMAL:
			exitSequence_main_region_On_Emotion_Normal();
			break;
		case MAIN_REGION_ON_EMOTION_LOVE:
			exitSequence_main_region_On_Emotion_Love();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Temperature Sensor */
	private void exitSequence_main_region_On_Temperature_Sensor() {
		switch (stateVector[4]) {
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_HOT:
			exitSequence_main_region_On_Temperature_Sensor_Hot();
			break;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_OPTIMAL:
			exitSequence_main_region_On_Temperature_Sensor_Optimal();
			break;
		case MAIN_REGION_ON_TEMPERATURE_SENSOR_COLD:
			exitSequence_main_region_On_Temperature_Sensor_Cold();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Battery */
	private void exitSequence_main_region_On_Battery() {
		switch (stateVector[5]) {
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_NORMAL:
			exitSequence_main_region_On_Battery_default_Status_Normal();
			break;
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_LOW:
			exitSequence_main_region_On_Battery_default_Status_Low();
			break;
		case MAIN_REGION_ON_BATTERY_DEFAULT_STATUS_DRAINED:
			exitSequence_main_region_On_Battery_default_Status_Drained();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CONSUME:
			exitSequence_main_region_On_Battery_default_Energy_Consume();
			break;
		case MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE:
			exitSequence_main_region_On_Battery_default_Energy_Charge();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Health */
	private void exitSequence_main_region_On_Health() {
		switch (stateVector[7]) {
		case MAIN_REGION_ON_HEALTH_GOOD:
			exitSequence_main_region_On_Health_Good();
			break;
		case MAIN_REGION_ON_HEALTH_DEGRADED:
			exitSequence_main_region_On_Health_Degraded();
			break;
		case MAIN_REGION_ON_HEALTH_BAD:
			exitSequence_main_region_On_Health_Bad();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_On_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Legs__entry_Default() {
		enterSequence_main_region_On_Legs_Stand_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Voice__entry_Default() {
		enterSequence_main_region_On_Voice_Silent_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Tail__entry_Default() {
		enterSequence_main_region_On_Tail_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Emotion__entry_Default() {
		enterSequence_main_region_On_Emotion_Normal_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Temperature_Sensor__entry_Default() {
		enterSequence_main_region_On_Temperature_Sensor_Optimal_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Battery_default_Status__entry_Default() {
		enterSequence_main_region_On_Battery_default_Status_Normal_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Battery_default_Energy__entry_Default() {
		enterSequence_main_region_On_Battery_default_Energy_Consume_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Battery__entry_Default() {
		enterSequence_main_region_On_Battery_default_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_On_Health__entry_Default() {
		enterSequence_main_region_On_Health_Good_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (chargerConnected) {
				exitSequence_main_region_Off();
				enterSequence_main_region_On_Legs_default();
				enterSequence_main_region_On_Voice_default();
				enterSequence_main_region_On_Tail_default();
				enterSequence_main_region_On_Emotion_default();
				enterSequence_main_region_On_Temperature_Sensor_default();
				enterSequence_main_region_On_Battery_default_Status_default();
				enterSequence_main_region_On_Battery_default_Energy_Charge_default();
				enterSequence_main_region_On_Health_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOff) {
				exitSequence_main_region_On();
				enterSequence_main_region_Off_default();
				react(0);
				transitioned_after = 7;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_Legs_Stand_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (((fetchCommand) && (!isStateActive(State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE)))) {
				exitSequence_main_region_On_Legs_Stand();
				enterSequence_main_region_On_Legs_Run_default();
				transitioned_after = 0;
			} else {
				if (((comeCommand) && (!isStateActive(State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE)))) {
					exitSequence_main_region_On_Legs_Stand();
					enterSequence_main_region_On_Legs_Walk_default();
					transitioned_after = 0;
				} else {
					if (((timeEvents[0]) && ((isStateActive(State.MAIN_REGION_ON_HEALTH_GOOD) && !isStateActive(State.MAIN_REGION_ON_BATTERY_DEFAULT_ENERGY_CHARGE))))) {
						exitSequence_main_region_On_Legs_Stand();
						enterSequence_main_region_On_Legs_Walk_default();
						transitioned_after = 0;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Legs_Walk_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (fetchCommand) {
				exitSequence_main_region_On_Legs_Walk();
				enterSequence_main_region_On_Legs_Run_default();
				transitioned_after = 0;
			} else {
				if (timeEvents[1]) {
					exitSequence_main_region_On_Legs_Walk();
					enterSequence_main_region_On_Legs_Stand_default();
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Legs_Run_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_main_region_On_Legs_Run();
				enterSequence_main_region_On_Legs_Stand_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Voice_Silent_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (barkCommand) {
				exitSequence_main_region_On_Voice_Silent();
				enterSequence_main_region_On_Voice_Bark_default();
				transitioned_after = 1;
			} else {
				if (attentionNeeded) {
					exitSequence_main_region_On_Voice_Silent();
					enterSequence_main_region_On_Voice_Howl_default();
					transitioned_after = 1;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Voice_Bark_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (timeEvents[3]) {
				exitSequence_main_region_On_Voice_Bark();
				enterSequence_main_region_On_Voice_Silent_default();
				transitioned_after = 1;
			} else {
				if (attentionNeeded) {
					exitSequence_main_region_On_Voice_Bark();
					enterSequence_main_region_On_Voice_Howl_default();
					transitioned_after = 1;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Voice_Howl_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (timeEvents[4]) {
				exitSequence_main_region_On_Voice_Howl();
				enterSequence_main_region_On_Voice_Silent_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Tail_Idle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2) {
			if (isStateActive(State.MAIN_REGION_ON_HEALTH_GOOD)) {
				exitSequence_main_region_On_Tail_Idle();
				enterSequence_main_region_On_Tail_Wagging_default();
				transitioned_after = 2;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Tail_Wagging_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2) {
			if (!isStateActive(State.MAIN_REGION_ON_HEALTH_GOOD)) {
				exitSequence_main_region_On_Tail_Wagging();
				enterSequence_main_region_On_Tail_Idle_default();
				transitioned_after = 2;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Emotion_Normal_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
			if (pet) {
				exitSequence_main_region_On_Emotion_Normal();
				enterSequence_main_region_On_Emotion_Love_default();
				transitioned_after = 3;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Emotion_Love_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
			if (timeEvents[5]) {
				exitSequence_main_region_On_Emotion_Love();
				enterSequence_main_region_On_Emotion_Normal_default();
				transitioned_after = 3;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Temperature_Sensor_Hot_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4) {
			if (getCurrentTemp()<getHotTempThreshold()) {
				exitSequence_main_region_On_Temperature_Sensor_Hot();
				enterSequence_main_region_On_Temperature_Sensor_Optimal_default();
				transitioned_after = 4;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Temperature_Sensor_Optimal_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4) {
			if (getCurrentTemp()>=getHotTempThreshold()) {
				exitSequence_main_region_On_Temperature_Sensor_Optimal();
				enterSequence_main_region_On_Temperature_Sensor_Hot_default();
				transitioned_after = 4;
			} else {
				if (getCurrentTemp()<getColdTempThreshold()) {
					exitSequence_main_region_On_Temperature_Sensor_Optimal();
					enterSequence_main_region_On_Temperature_Sensor_Cold_default();
					transitioned_after = 4;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Temperature_Sensor_Cold_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4) {
			if (getCurrentTemp()>=getColdTempThreshold()) {
				exitSequence_main_region_On_Temperature_Sensor_Cold();
				enterSequence_main_region_On_Temperature_Sensor_Optimal_default();
				transitioned_after = 4;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Battery_default_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5) {
		}
		return transitioned_after;
	}
	
	private long main_region_On_Battery_default_Status_Normal_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5) {
			if (getCurrentEnergy()<getLowEnergy()) {
				exitSequence_main_region_On_Battery_default_Status_Normal();
				enterSequence_main_region_On_Battery_default_Status_Low_default();
				transitioned_after = 5;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Battery_default_Status_Low_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5) {
			if (getCurrentEnergy()<=0) {
				exitSequence_main_region_On_Battery_default_Status_Low();
				enterSequence_main_region_On_Battery_default_Status_Drained_default();
				transitioned_after = 5;
			} else {
				if (getCurrentEnergy()>=getLowEnergy()) {
					exitSequence_main_region_On_Battery_default_Status_Low();
					enterSequence_main_region_On_Battery_default_Status_Normal_default();
					transitioned_after = 5;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Battery_default_Status_Drained_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5) {
			if (getCurrentEnergy()>0) {
				exitSequence_main_region_On_Battery_default_Status_Drained();
				enterSequence_main_region_On_Battery_default_Status_Low_default();
				transitioned_after = 5;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_On_Battery_default_Energy_Consume_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6) {
			if (((chargerConnected) && (isStateActive(State.MAIN_REGION_ON_LEGS_STAND)))) {
				exitSequence_main_region_On_Battery_default_Energy_Consume();
				enterSequence_main_region_On_Battery_default_Energy_Charge_default();
				main_region_On_Battery_default_react(5);
				transitioned_after = 6;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[6]) {
				setCurrentEnergy(getCurrentEnergy() - energyReq);
			}
			transitioned_after = main_region_On_Battery_default_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_Battery_default_Energy_Charge_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6) {
			if (chargerDisconnected) {
				exitSequence_main_region_On_Battery_default_Energy_Charge();
				enterSequence_main_region_On_Battery_default_Energy_Consume_default();
				main_region_On_Battery_default_react(5);
				transitioned_after = 6;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (((timeEvents[7]) && (getCurrentEnergy()<getMaxEnergy()))) {
				setCurrentEnergy(getCurrentEnergy() + ((energyReqBaseline * 5)));
			}
			transitioned_after = main_region_On_Battery_default_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_Health_Good_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7) {
			if (((getHealthPoints() - getTemperaturePenalty()) - getBatteryPenalty())<3) {
				exitSequence_main_region_On_Health_Good();
				enterSequence_main_region_On_Health_Degraded_default();
				main_region_On_react(0);
				transitioned_after = 7;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_Health_Degraded_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7) {
			if (((getHealthPoints() - getTemperaturePenalty()) - getBatteryPenalty())==3) {
				exitSequence_main_region_On_Health_Degraded();
				enterSequence_main_region_On_Health_Good_default();
				main_region_On_react(0);
				transitioned_after = 7;
			} else {
				if (((getHealthPoints() - getTemperaturePenalty()) - getBatteryPenalty())<2) {
					exitSequence_main_region_On_Health_Degraded();
					raiseAttentionNeeded();
					
					enterSequence_main_region_On_Health_Bad_default();
					main_region_On_react(0);
					transitioned_after = 7;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_Health_Bad_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7) {
			if (((getHealthPoints() - getTemperaturePenalty()) - getBatteryPenalty())>=2) {
				exitSequence_main_region_On_Health_Bad();
				enterSequence_main_region_On_Health_Degraded_default();
				main_region_On_react(0);
				transitioned_after = 7;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
